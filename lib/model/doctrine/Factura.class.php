<?php

/**
 * Factura
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sffacturacion
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Factura extends BaseFactura
{
    public function getNumeroFacturaTipo(){
        return $this->getFacturaTipo().$this->getNumeroFactura();
    }

    public function getFacturaTipo(){
        if($this->getTipoFactura() == 'FISICA') return '<b style="background: yellow; color: black; padding: 1px 2px; font-size: 120%" title="Factura Fisica">F</b>';
        else return '<b style="background: blue; color: white; padding: 1px 2px; font-size: 120%" title="Factura Electronica">E</b>';
    }




    public function anular(){
        //COMO SE PUEDEN PRODUCIR PROBLEMAS SE ENVUEVE EN UNA TRANSACCION
        $conn = Doctrine_Manager::getInstance()->getCurrentConnection();        
        try{
            //INICIO DE LA TRANSACCION
            $conn->beginTransaction();
            
            //ANULA LA FACTURA
            $er = 1;
            $EFANULADA = Doctrine::getTable('EstadoFactura')->findOneByNombreEstadofactura('Anulada');
            $this->setEstadoFactura($EFANULADA);
            $this->save();

            $er = 2;
            //RESETEO LAS REFERENCIAS A SALIDA_ACTIVO
            $SALIDA_ACs = Doctrine::getTable('SalidaActivo')->findByIdFactura($this->getIdFactura());
            foreach ($SALIDA_ACs as $SALIDA_AC) {
                $SALIDA_AC->setIdFactura(0);
                $SALIDA_AC->setFactura(0);
                $SALIDA_AC->save();
            }

            $er = 3;
            //ANULO LAS CUOTAS
            $CUOTAS = Doctrine::getTable('Cuota')->findByIdFactura($this->getIdFactura());
            foreach ($CUOTAS as $CUOTA) {
                $CUOTA->setEstado('Anulada');
            }

            $er = 4;
            //ELIMINO LA REFERENCIA A GUIA
            $GUIAS = Doctrine::getTable('Guia')->findByIdFactura($this->getIdFactura());
            foreach ($GUIAS as $GUIA) {
                $GUIA->setIdFactura(null);
                $GUIA->save();
            }

            //SI TODO VA BIEN SE GUARDA
            $conn->commit();
            return 'true';
        }
        catch (Exception $e){
            //SI OCURRE UN ERROR NO SE GUARDA NADA
            $conn->rollBack();
            switch ($er){
                case 1:
                    $error = "No se encontro el estado anulado";
                    break;
                case 2:
                    $error = "No se pudo resetiar las referencias a salida activo";
                    break;
                case 3:
                    $error = "No se pudo anular la(s) cuota(s)";
                    break;
                case 4:
                    $error = "No se pudo eliminar las referencias a guia";
                    break;
            }
            $error .= ", se aborta toda la operación\n\nDetalle del error:\n".$e->getMessage();
            return $error;
        }
        

        
    }

    public function getDatosCliente(){
        $retorno = "<table id='tooltip'>";
        $retorno = $retorno."<tr>";
        $retorno = $retorno."<td>Emision:</td><td>".$this->getDateTimeObject('fechaemision_factura')->format('d/m/Y')."</td>";
        $retorno = $retorno."</tr>";
        $retorno = $retorno."<tr>";
        $retorno = $retorno."<td>RUT:</td><td>".$this->getRutFactura()."</td>";
        $retorno = $retorno."</tr>";
        $retorno = $retorno."<tr>";
        $retorno = $retorno."<td>Nombre:</td><td>".$this->getNombreFactura()."</td>";
        $retorno = $retorno."</tr>";
        $retorno = $retorno."<tr>";
        $retorno = $retorno."<td>Telefono:</td><td>".$this->getTelefonoFactura()."</td>";
        $retorno = $retorno."</tr>";
        $retorno = $retorno."<tr>";
        $retorno = $retorno."<td>Dirección:</td><td>".$this->getDireccionFactura()."</td>";
        $retorno = $retorno."</tr>";
        $retorno = $retorno."<tr>";
        $retorno = $retorno."<td>Comuna:</td><td>".$this->getComunaFactura()."</td>";
        $retorno = $retorno."</tr>";
        $retorno = $retorno."<tr>";
        $retorno = $retorno."<td>Ciudad:</td><td>".$this->getCiudadFactura()."</td>";
        $retorno = $retorno."</tr>";
        $retorno = $retorno."</table>";
        return $retorno;
    }

    public function getNombreVendedor(){
        $notas = Doctrine_Query::create()
          ->select('a.id_responsable')
          ->from('Salida a')
          ->where('a.id_salida = ?',  $this->getIdNotapedidoFactura())
          ->execute();
        if(count($notas) > 0){
            $id_vendedor = $notas[0]['id_responsable'];
            $vendedores = Doctrine_Query::create()
              ->select('a.descripcion')
              ->from('Usuarios a')
              ->where('a.id_usuario = ?',  $id_vendedor)
              ->execute();
            if(count($vendedores) > 0){
                return $vendedores[0]['descripcion'];
            }
            else return 'E:No existe usuario asociado a la NP';

        }
        else return 'E:No existe la NP asociada';
    }

    public function ValidarSaldo(){
        $cuotas = $this->getCuota();
        $pagado = 0;
        foreach ($cuotas as $cuota){
            $pagado += $cuota->getMontopagadoCuota();
        }
        $saldo = $this->getMontoFactura() - $pagado;
        $this->setSaldoFactura($saldo);
        $this->save();
    }

    public function ValidarEstado(){
        if($this->getEstadoFactura()->getNombreEstadofactura() != 'Anulada'){
            if($this->getSaldoFactura() == 0){
                $EFPAGADA = Doctrine::getTable('EstadoFactura')->findOneByNombreEstadofactura('Pagada');
                $this->setEstadoFactura($EFPAGADA);
                $this->save();
            }
            else{
                if($this->getFechaemisionFactura() != NULL){
                    $EFEMITIDA = Doctrine::getTable('EstadoFactura')->findOneByNombreEstadofactura('Emitida');
                    $this->setEstadoFactura($EFEMITIDA);
                    $this->save();
                }
                else{
                    $EFINGRESADA = Doctrine::getTable('EstadoFactura')->findOneByNombreEstadofactura('Ingresada');
                    $this->setEstadoFactura($EFINGRESADA);
                    $this->save();
                }

            }
        }
    }


    public function getEstado(){
        $this->ValidarSaldo();
        $this->ValidarEstado();
        return $this->getEstadoFactura()->getNombreEstadofactura();
    }

    public function getNombreFacturaCorto($largo){
        if(strlen($this->getNombreFactura()) > $largo) return substr($this->getNombreFactura(), 0, $largo).'...';
        else return $this->getNombreFactura();
    }

    public function getResponsableFacturaCorto($length){
        if(strlen($this->getResponsableFactura()) > $length) return substr ($this->getResponsableFactura(), 0, $length);
        else return $this->getResponsableFactura();
    }

    public function  getComentarioFacturaTD() {
        if($this->getComentarioFactura() != ''){
            $td = '<td title="'.$this->getComentarioFactura().'" align="center"><img alt="comentario" width="20px" src="/images1/comentario.jpg" /></td>';
        }
        else{
            $td = '<td></td>';
        }
        return $td;
    }

    public function  getFechaemisionFacturaCustom() {
        if($this->getFechaemisionFactura() != NULL) return $this->getDateTimeObject('fechaemision_factura')->format('d/m/Y');
        else return 'NO Emitida';
    }

}